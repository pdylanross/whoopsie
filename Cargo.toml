[workspace]
resolver = "2"
members = ["app", "entities", "frontend", "macros", "server"]

# need to be applied only to wasm build
[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

[workspace.dependencies]
leptos = { version = "0.8.8", features = ["nightly"] }
leptos_meta = { version = "0.8.2" }
leptos_router = { version = "0.8.5", features = ["nightly"] }
leptos_axum = { version = "0.8.6" }

tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["json", "env-filter", "local-time"] }
tracing-wasm = "0.2.1"
axum = "0.8.4"
cfg-if = "1.0.3"
console_error_panic_hook = "0.1.7"
console_log = "1.0.0"
http = "1.3.1"
log = "0.4.28"
simple_logger = "5.0.0"
thiserror = "2.0.16"
tokio = { version = "1.47.1", features = ["full"] }
tower = { version = "0.5.2", features = ["full"] }
tower-http = { version = "0.6.4", features = ["full"] }
wasm-bindgen = "=0.2.100"
figment = { version = "0.10.19" }
sea-orm = { version = "1.1.16" }
serde = { version = "1.0.219", features = ["derive"] }
anyhow = { version = "1.0.99", features = ["backtrace"] }
chrono = { version = "0.4.42", features = ["serde"] }
tempfile = "3.22.0"
dotenvy = "0.15.7"
serde_yaml = "0.9.34"
futures = "0.3.31"
serde_json = "1.0.145"
humantime-serde = "1.1.1"

# See https://github.com/leptos-rs/cargo-leptos for documentation of all the parameters.

# A leptos project defines which workspace members
# that are used together frontend (lib) & server (bin)
[[workspace.metadata.leptos]]
# this name is used for the wasm, js and css file names
name = "whoops"

# the package in the workspace that contains the server binary (binary crate)
bin-package = "server"

# the package in the workspace that contains the frontend wasm binary (library crate)
lib-package = "frontend"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The tailwind input file.
tailwind-input-file = "style/tailwind.css"

# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
tailwind-config-file = "tailwind.config.js"

# Watch additional files for changes
watch-additional-files = ["style", "tailwind.config.js", "hack/config"]

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = []

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = []

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
